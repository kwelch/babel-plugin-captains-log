// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`bugs.js 1`] = `
"function argsIsNotArray() {
  console.warn;
}

function consoleAssigned() {
  const c = console;
  // see [#4](https://github.com/kwelch/babel-plugin-captains-log/issues/4)
  c.warn(\\"not prepended because we don't catch assignments\\");
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
function argsIsNotArray() {
  console.warn;
}

function consoleAssigned() {
  const c = console;
  // see [#4](https://github.com/kwelch/babel-plugin-captains-log/issues/4)
  c.warn(\\"not prepended because we don't catch assignments\\");
}"
`;

exports[`class.js 1`] = `
"class WrapClass {
  constructor() {
    console.log(\\"ctr\\");
  }

  render() {
    console.log(\\"Component\\");
    items.map(i => {
      console.log(i);
      return i.name;
    });
    return null;
  }

  // todo: make it work with stage-2
  // namedArrow = () => {
  //   console.debug(\\"test\\");
  // };
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
class WrapClass {
  constructor() {
    console.log(\\"class.js\\", \\"ctr\\");
  }

  render() {
    console.log(\\"class.js\\", \\"Component\\");
    items.map(i => {
      console.log(\\"class.js\\", i);
      return i.name;
    });
    return null;
  }

  // todo: make it work with stage-2
  // namedArrow = () => {
  //   console.debug(\\"test\\");
  // };
}"
`;

exports[`factory.js 1`] = `
"const factory = () => class WrapClass {
  constructor() {
    console.log(\\"ctr\\");
  }
  // todo: make it work with stage-2
  // namedArrow = () => {
  //   console.debug(\\"test\\");
  // };
};
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
const factory = () => class WrapClass {
  constructor() {
    console.log(\\"factory.js\\", \\"ctr\\");
  }
  // todo: make it work with stage-2
  // namedArrow = () => {
  //   console.debug(\\"test\\");
  // };
};"
`;

exports[`method.js 1`] = `
"function logAll() {
  console.assert(1 === 1);
  console.clear();
  console.count(\\"count\\");
  console.debug(\\"debug\\");
  console.dir(obj);
  console.error(\\"error\\");
  console.exception(\\"exception\\");
  console.group(\\"group\\");
  console.groupEnd(\\"group\\");
  console.groupCollapsed(\\"groupCollapsed\\");
  console.groupEnd(\\"groupCollapsed\\");
  console.info(\\"info\\");
  console.log(\\"log\\");
  console.profile(\\"profile\\");
  console.profileEnd(\\"profile\\");
  console.table([\\"table\\"]);
  console.time(\\"time\\");
  console.timeEnd(\\"time\\");
  console.trace(\\"trace\\");
  console.warn(\\"warn\\");
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
function logAll() {
  console.assert(1 === 1);
  console.clear();
  console.count(\\"count\\");
  console.debug(\\"method.js\\", \\"debug\\");
  console.dir(obj);
  console.error(\\"method.js\\", \\"error\\");
  console.exception(\\"method.js\\", \\"exception\\");
  console.group(\\"group\\");
  console.groupEnd(\\"group\\");
  console.groupCollapsed(\\"groupCollapsed\\");
  console.groupEnd(\\"groupCollapsed\\");
  console.info(\\"method.js\\", \\"info\\");
  console.log(\\"method.js\\", \\"log\\");
  console.profile(\\"profile\\");
  console.profileEnd(\\"profile\\");
  console.table([\\"table\\"]);
  console.time(\\"time\\");
  console.timeEnd(\\"time\\");
  console.trace(\\"trace\\");
  console.warn(\\"method.js\\", \\"warn\\");
}"
`;

exports[`nesting.js 1`] = `
"function topLevel() {
  console.log(\\"a\\");
  const level1 = () => {
    console.log(\\"b\\");

    const level2 = () => {
      console.log(\\"c\\");
    };
    const level2b = () => {
      console.log(\\"d\\");

      const level3 = () => {
        console.log(\\"e\\");
      };
    };
  };
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
function topLevel() {
  console.log(\\"nesting.js\\", \\"a\\");
  const level1 = () => {
    console.log(\\"nesting.js\\", \\"b\\");

    const level2 = () => {
      console.log(\\"nesting.js\\", \\"c\\");
    };
    const level2b = () => {
      console.log(\\"nesting.js\\", \\"d\\");

      const level3 = () => {
        console.log(\\"nesting.js\\", \\"e\\");
      };
    };
  };
}"
`;

exports[`simple.js 1`] = `
"function add(a, b) {
  console.log(a, b);
  return a + b;
}

const subtract = (a, b) => {
  console.log(a, b);
  return a - b;
};
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
function add(a, b) {
  console.log(\\"simple.js\\", a, b);
  return a + b;
}

const subtract = (a, b) => {
  console.log(\\"simple.js\\", a, b);
  return a - b;
};"
`;
